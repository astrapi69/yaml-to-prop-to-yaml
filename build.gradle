plugins {
    id "io.franzbecker.gradle-lombok" version "3.2.0"
    id "java"
    id "maven-publish"
    id "signing"
    id "com.github.ben-manes.versions" version "0.27.0"
    id "com.github.hierynomus.license" version "0.15.0"
}

apply plugin: "jacoco"

// workhack for license issue #76
gradle.startParameter.excludedTaskNames += "licenseMain"
gradle.startParameter.excludedTaskNames += "licenseTest"

group = "de.alpharogroup"
version = "1.1.1"
sourceCompatibility = 1.8

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
}

ext {
    lombokVersion = "1.18.10"
    snakeyamlVersion = "1.25"
    commonsIoVersion = "2.6"
    resourcebundleCoreVersion = "3.2"
    sillyCollectionsVersion = "5.4"
    fileWorkerVersion = "5.3"
    testObjectsVersion = "5.2"
    jobjContractVerifierVersion = "3.2"
    mysticCryptVersion = "7.1.2"
    testngVersion = "7.0.0"
    junitVersion = "4.12"
    meanbeanVersion = "2.0.3"
    meanbeanFactoriesVersion = "1.1.1"
    mockitoCoreVersion = "3.1.0"
    propertiesToYamlConverterVersion = "1.0.1"
}

dependencies {
    compile "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    compile "org.yaml:snakeyaml:${snakeyamlVersion}"
    compile "commons-io:commons-io:${commonsIoVersion}"
    compile "de.alpharogroup:resourcebundle-core:${resourcebundleCoreVersion}"
    compile "com.anubhavshukla:properties-to-yaml-converter:${propertiesToYamlConverterVersion}"
    compile "de.alpharogroup:silly-collections:${sillyCollectionsVersion}"
    compile "de.alpharogroup:file-worker:${fileWorkerVersion}"
    testCompile "de.alpharogroup:mystic-crypt:${mysticCryptVersion}"
    testCompile "de.alpharogroup:test-objects:${testObjectsVersion}"
    testCompile "de.alpharogroup:jobj-contract-verifier:${jobjContractVerifierVersion}"
    testCompile "org.testng:testng:${testngVersion}"
    testCompile "junit:junit:${junitVersion}"
    testCompile "org.meanbean:meanbean:${meanbeanVersion}"
    testCompile "de.alpharogroup:meanbean-factories:${meanbeanFactoriesVersion}"
    testCompile "org.mockito:mockito-core:${mockitoCoreVersion}"
}
//
//license {
//    ext.year="2015"
//    ext.owner="Asterios Raptis"
//    header rootProject.file("src/main/resources/LICENSE.txt")
//    excludes(["**/README",
//              "**/README.md",
//              "**/LICENSE",
//              "**/NOTICE",
//              "**/*.xml",
//              "**/*.xsl",
//              "**/*.xsd",
//              "**/*.dtd",
//              "**/*.html",
//              "**/*.jsp",
//              "**/*.jpa",
//              "**/*.sql",
//              "**/*.properties",
//              "**/*.bat",
//              "**/*.gradle",
//              "**/*.MF",
//              "**/*.txt",
//              "**/*.vm",
//              "**/*.log",
//              "**/*.map",
//              "**/*.js.map",
//              "**/*.tmpl",
//              "**/*.js.tmpl",
//              "**/*.editorconfig",
//              "**/*.lombok.config",
//              "src/test/resources/**",
//              "src/main/resources/**"])
//}

task sourcesJar(type: Jar) {
    archiveClassifier.set("sources")
    from(sourceSets.main.allJava)
}

task javadocJar(type: Jar) {
    from javadoc
    archiveClassifier.set("javadoc")
    javadoc.properties.failOnError = true
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = "${rootProject.name}"
            from components.java
            artifact sourcesJar
            artifact javadocJar
            pom {
                name = "${rootProject.name}"
                description = "The yaml-to-prop-to-yaml project provides a two way converter for "+
                "convert yaml files to properties and properties back to yaml files"
                url = "https://github.com/astrapi69/"+"${rootProject.name}"
                organization {
                    name = "Alpha Ro Group UG (haftungsbeschr√§ngt)"
                    url = "http://www.alpharogroup.de/"
                }
                issueManagement {
                    system = "GitHub"
                    url = "https://github.com/astrapi69/"+"${rootProject.name}"+"/issues"
                }
                licenses {
                    license {
                        name = "MIT License"
                        url = "http://www.opensource.org/licenses/mit-license.php"
                        distribution = "repo"
                    }
                }
                developers {
                    developer {
                        id = "astrapi69"
                        name = "Asterios Raptis"
                    }
                }
                scm {
                    connection = "scm:git:git:@github.com:astrapi69/"+"${rootProject.name}"+".git"
                    developerConnection = "scm:git:git@github.com:astrapi69/"+"${rootProject.name}"+".git"
                    url = "git:@github.com:astrapi69/"+"${rootProject.name}"+".git"
                }
            }
        }
    }
    repositories {
        maven {
            credentials {
                username System.getenv("ossrhUsername") ?: project.property("ossrhUsername")
                password System.getenv("ossrhPassword") ?: project.property("ossrhPassword")
            }
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
            url = version.endsWith("SNAPSHOT") ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption("html5", true)
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

test {
    useTestNG()
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false
    }
}

check.dependsOn jacocoTestReport

